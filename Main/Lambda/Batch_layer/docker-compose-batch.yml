version: '3'

services:
  # 1. Airflow Services
  postgres:
    image: postgres:14.0
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - batch_network

  webserver:
    image: apache/airflow:2.6.0-python3.9
    container_name: airflow-webserver
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__WEBSERVER__SECRET_KEY=this_is_a_very_secured_key
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=admin
      - _AIRFLOW_WWW_USER_PASSWORD=admin
    volumes:
      - .:/opt/airflow/batch_layer
      - ./dags:/opt/airflow/dags
      - ./batch_layer.py:/opt/airflow/batch_layer/batch_layer.py
      - ./spark_tranformation.py:/opt/airflow/batch_layer/spark_tranformation.py
      - ./save_data_postgresql.py:/opt/airflow/batch_layer/save_data_postgresql.py
    ports:
      - "8080:8080"
    command: bash -c "airflow db init && airflow webserver"
    networks:
      - batch_network

  scheduler:
    image: apache/airflow:2.6.0-python3.9
    container_name: airflow-scheduler
    depends_on:
      - webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - .:/opt/airflow/batch_layer
      - ./dags:/opt/airflow/dags
    command: airflow scheduler
    networks:
      - batch_network

  # 2. Spark Services  
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_MESSAGE_MAX_SIZE=2047
      - SPARK_NETWORK_MAX_MESSAGE_SIZE=2047
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080
    ports:
      - "9090:8080"
      - "7077:7077"
    networks:
      - batch_network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_MESSAGE_MAX_SIZE=2047
      - SPARK_NETWORK_MAX_MESSAGE_SIZE=2047
      - SPARK_WORKER_WEBUI_PORT=8081
    ports:
      - "8081:8081"
    depends_on:
      - spark-master
    networks:
      - batch_network

  # 3. Kafka Services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper-batch
    ports:
      - "2182:2181"  # Changed port to avoid conflict
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_MAX_CLIENT_CNXNS: 0
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_SESSION_TIMEOUT: 40000
      ZOOKEEPER_MIN_SESSION_TIMEOUT: 4000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - batch_network

  # Sửa phần kafka service
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-batch
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      # Các config cũ giữ nguyên
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      
      # Memory configs
      KAFKA_HEAP_OPTS: "-Xmx4G -Xms4G"  # Tăng heap size lên 4GB
      
      # Message size configs (giữ nguyên)
      KAFKA_MESSAGE_MAX_BYTES: 2000000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 2000000000
      KAFKA_MAX_REQUEST_SIZE: 2000000000
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 2000000000
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 1024000
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 1024000
      KAFKA_MAX_PARTITION_FETCH_BYTES: 2000000000

      # Thêm configs để optimize memory
      KAFKA_NUM_NETWORK_THREADS: 3
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_BACKGROUND_THREADS: 10
      KAFKA_QUEUED_MAX_REQUESTS: 500

      # Thêm các config sau
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - batch_network

  # 4. Hadoop Services
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"  # Namenode UI
      - "9000:9000"  # HDFS
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - CORE_CONF_hadoop_http_staticuser_user=root
      - HDFS_CONF_dfs_webhdfs_enabled=true
      - HDFS_CONF_dfs_permissions_enabled=false
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - batch_network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    depends_on:
      - namenode
    ports:
      - "9864:9864"  # Datanode UI
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - SERVICE_PRECONDITION=namenode:9870
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9864"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - batch_network

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    depends_on:
      - namenode
      - datanode
    ports:
      - "8088:8088"  # Resource Manager UI
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - YARN_CONF_yarn_resourcemanager_recovery_enabled=true
      - YARN_CONF_yarn_resourcemanager_store_class=org.apache.hadoop.yarn.server.resourcemanager.recovery.FileSystemRMStateStore
      - YARN_CONF_yarn_resourcemanager_scheduler_class=org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler
      - YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___mb=8192
      - YARN_CONF_yarn_scheduler_capacity_root_default_maximum___allocation___vcores=4
      - SERVICE_PRECONDITION=namenode:9000 namenode:9870 datanode:9864
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - batch_network

  nodemanager:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    depends_on:
      - namenode
      - datanode
      - resourcemanager
    ports:
      - "8042:8042"  # Node Manager UI
    environment:
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
      - YARN_CONF_yarn_resourcemanager_hostname=resourcemanager
      - YARN_CONF_yarn_nodemanager_aux___services=mapreduce_shuffle
      - SERVICE_PRECONDITION=resourcemanager:8088
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8042"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - batch_network

# Control Center **Phòng điều khiển:**
# Cho phép giám sát hoạt động của băng chuyền và sửa lỗi nếu có sự cố.                                                                       |
  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: 'false'
      # Thêm các config sau
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: 960000
      CONTROL_CENTER_STREAMS_PRODUCER_REQUEST_TIMEOUT_MS: 960000
      PORT: 9021
    networks:
      - batch_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5


volumes:
  postgres-db-volume:
    driver: local
  hadoop_namenode:
    driver: local
  hadoop_datanode:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_log:
    driver: local

networks:
  batch_network:
    driver: bridge